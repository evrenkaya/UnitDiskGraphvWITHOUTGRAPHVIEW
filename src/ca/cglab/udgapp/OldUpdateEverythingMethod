/*try
		{	
			// Set the mouse cursor to wait to show user that the updating is still going on
			frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
			
			exponent = retrieveExponentFromTextFields();
			epsilon = retrieveEpsilonFromTextFields();

			udg.setMaxDistance(getMaxDistance());
			udg.removeAllEdges();
			udg.createNewConnectedEdges();
			udg.determineIntersectingEdges();
			
			BreadthFirstSearch bfs = new BreadthFirstSearch(udg);
			bfs.determineAllConnectedComponents();
			
			int numVertices = udg.getNumVertices();
			numVerticesLabel.setText("n = " + numVertices);
			
			int numComponents = bfs.numConnectedComponentsWithAtLeastKVertices((int)Float.parseFloat(kTextField.getText()));
			numComponentsLabel.setText("# Components with >= k vertices: " + numComponents);
			
			numEdgesLabel.setText("|E| = " + Integer.toString(udg.getNumEdges()));
			maxVertexDistanceLabel.setText("r = " + Float.toString(getMaxDistance()));
			
			int numIntersectingEdges = udg.getNumIntersectingEdges();
			int numFreeEdges = udg.getNumFreeEdges();
			numIntersectingEdgesLabel.setText("# Intersecting edges: " + numIntersectingEdges);
			numFreeEdgesLabel.setText("# Free edges: " + numFreeEdges);
			
			updateListOfAllComponents(bfs);
			allComponentsLabel.setText(listOfAllComponents);
		}
		catch(NumberFormatException e)
		{
			setExponentTextFields();
			showErrorMessage("Please enter real numbers only.");
		}
		catch(ArithmeticException e)
		{
			setExponentTextFields();
			showErrorMessage("Cannot divide by zero.");
		}
		catch(IllegalStateException e)
		{
			setExponentTextFields();
			showErrorMessage("Please reduce the number of edges.");
		}
		// Set mouse back to normal here because all updating is done now
		frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));*/